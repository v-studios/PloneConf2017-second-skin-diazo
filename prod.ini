[server:main]
use = egg:Paste#http
host = 0.0.0.0
port = 8080

[composite:main]
use = egg:Paste#urlmap
/static = static
/ = default

# Serve the theme from disk from /static (as set up in [composite:main])
[app:static]
use = egg:Paste#static
document_root = %(here)s/theme

# Serve the Diazo-transformed content everywhere else
[pipeline:default]
pipeline = theme
           content

# Reference the rules file and the prefix applied to relative links
# (e.g. the stylesheet). We turn on debug mode so that the theme is
# re-built on each request, making it easy to experiment.

[filter:theme]
use = egg:diazo
rules = %(here)s/rules.xml
prefix = /static
#debug = true

[app:content]
use = egg:Paste#proxy
address = http://WWW.V-STUDIOS.COM
suppress_http_headers = accept-encoding

[config:aws]
# - For each resource, give logical name and tags first, the special configs
# - The created logical name will be prefixed by the 'project'
# - Tags will be set including Name which will get project-name-env-
# - AWS resource logical names must be A-Za-z0-9 (no special chars)
# - Tag 'Name' like 'App-env-role' so they sort nicely by environment
# - Separarate ','-delimited values in python (tags, sgs, etc)
# - Separate tags into key:value ':' in python
# TODO: 
# - make the repetitive tags app, env global configs?
# - use logical name as tag Name to remove repetition

# AWS Account Info
# see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/pseudo-parameter-reference.html
# Get AWS Account ID with :
# "Ref" : "AWS::AccountId"
account = ############

# Get AWS Region with :
# "Ref" : "AWS::Region"
region = us-east-1

# App Name
app = TTTDiazo
env = prod

# VPC ID
vpc_id = vpc-320bc355
pub_subnet_id =  subnet-ae725fd8
app_subnet_id =  subnet-a1725fd7

# Security Groups
sg_elb = sg-edb51696
sg_ssh = sg-e3b51698

sg_app.name = SGapp
sg_app.desc = Allow from ELB only via SGelb
sg_app.ports = 80,443
# not using cidr_block here, but SGelb reference

# IAM Role + Profile
role.name = RoleEc2S3
profile.name = Profile
s3.bucket = CODEBUCKET.DOMAIN.v-studios.com

# AutoScaling Group
launchconfig.name = LaunchConfig
launchconfig.instance_type = t2.micro
# ami-9a562df2 Ubuntu-trusty-14.04-amd64-server-20150123 
# ami-d05e75b8 Ubuntu Server 14.04 LTS (HVM), SSD Volume Type
launchconfig.image_id = ami-d05e75b8
launchconfig.key_name = AWS-KEYPAIR-NAME

asg.name = ASG
asg.scale_min = 2
asg.scale_max = 2
asg.cooldown = 300
asg.health_grace = 300

# We don't need policy and alarm if our max is 1
# but we may want to allow it to scale up at some point

# AutoScaling Policies
scale_up_policy.name = ScaleUp
scale_up_policy.cooldown = 60

scale_down_policy.name = ScaleDown
scale_down_policy.cooldown = 300

# CloudWatch Alarms
alarm_high.name = AlarmHigh
alarm_high.threshold = 25

alarm_low.name = AlarmLow
alarm_low.threshold = 10

alarm_elb_empty.name = AlarmELBEmpty
alarm_elb_empty.threshold = 1

# ELB
elb.name = ELB
elb.ssl_id = certificate/########-####-####-####-############

# Route53 DNS Records
dns.zone = ttt.example.com.
dns.ttl = 900

dns.name = DNS
dns.record = tttdiazo

dns2.name = DNS2
dns2.record = lhediazo

dns_ttt.name = DNSOrigin
dns_ttt.record = TTT-ORIGIN-HOSTNAME
dns_ttt.ip = ####.####.####.####

# SNS Notification
sns.name = SNS
sns.emails = USER1@v-studios.com,USER2@v-studios.com

# CodeDeploy Deployment Group
cd_role_arn = arn:aws:iam::############:role/TTTinfra-TTTDiazoCDRole-WYZFH98NNFVL
cd_application = TTTDiazo
cd_deploymentgroup.name = Prod
cd_deploymentgroup.configname = CodeDeployDefault.OneAtATime
cd_iam_user = TTTinfra-TTTDiazoCDUser-15YJWXRBDTFBM
cd_iam_user_policy.name = CDIAMUserPolicy
